{"version":3,"sources":["components/redux/actionTypes.js","components/redux/reducer.js","rootReducer.js","components/redux/actions.js","components/Todo/TodoItem/TodoItem.js","components/Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["DELETE_TODO","CHECKBOX_TODO","EDIT_TODO","INPUT_VALUE","ADD_TODO","UPDATE_TODO","initialState","term","items","flg","rootReducer","combineReducers","Todo","state","action","type","payload","actionTypes","id","todoItem","completed","map","item","index","selectedItemId","filter","inputHandler","event","target","value","addTodoHandler","Date","updateTodoHandler","deleteTodoHandler","checkBoxHandler","editTodoHandler","connect","dispatch","bindActionCreators","key","onClick","className","onChange","store","createStore","composeWithDevTools","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAAaA,EAAc,cACdC,EAAgB,gBAChBC,EAAY,YACZC,EAAc,cACdC,EAAW,WACXC,EAAc,c,ykBCH3B,IAAMC,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,KAAK,GCGQC,EAJKC,0BAAgB,CAClCC,KDGa,WAAyC,IAA/BC,EAA8B,uDAAtBP,EAAcQ,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,KAAKE,EACH,OAAO,EAAP,GACKJ,EADL,CAEEN,KAAMS,IAGV,KAAKC,EACH,OAAO,EAAP,GACKJ,EADL,CAEEN,KAAM,GACNC,MAAM,GAAD,mBACAK,EAAML,OADN,CAEH,CACEU,GAAIF,EAAQE,GACZC,SAAUN,EAAMN,KAChBa,WAAW,KAGfX,KAAK,IAGT,KAAKQ,EACH,OAAO,EAAP,GACKJ,EADL,CAEEN,KAAM,GACNC,MAAOK,EAAML,MAAMa,KAAI,SAACC,EAAMC,GAAP,OACpBV,EAAMW,iBAAmBD,EAA1B,KAEOD,EAFP,CAGIH,SAAUH,EAAQT,OAEpBe,KACJb,KAAK,IAGT,KAAKQ,EACH,OAAO,EAAP,GACKJ,EADL,CAEEL,MAAOK,EAAML,MAAMiB,QAAO,SAACH,GACzB,OAAOA,EAAKJ,KAAOF,EAAQE,QAIjC,KAAKD,EACH,OAAO,EAAP,GACKJ,EADL,CAEEL,MAAOK,EAAML,MAAMa,KAAI,SAAAC,GAAI,OACxBA,EAAKJ,KAAOF,EAAQE,GAArB,KAEOI,EAFP,CAGIF,WAAYE,EAAKF,YAEnBE,OAGR,KAAKL,EACH,OAAO,EAAP,GACKJ,EADL,CAEEN,KAAMM,EAAML,MAAMQ,EAAQE,IAAIC,SAC9BV,KAAK,EACLe,eAAgBR,EAAQE,KAG5B,QACE,OAAOL,MEzEN,SAASa,EAAaC,GAC3B,MAAO,CACLZ,KAAME,EACND,QAASW,EAAMC,OAAOC,OAInB,SAASC,EAAevB,GAC7B,MAAO,CACLQ,KAAME,EACND,QAAS,CACPE,IAAK,IAAIa,KACTxB,SAKC,SAASyB,EAAkBzB,GAChC,MAAO,CACLQ,KAAME,EACND,QAAS,CACPT,SAKC,SAAS0B,EAAkBf,GAChC,MAAO,CACLH,KAAME,EACND,QAAS,CACPE,OAKC,SAASgB,EAAgBhB,GAC9B,MAAO,CACLH,KAAME,EACND,QAAS,CACPE,OAKC,SAASiB,EAAgBjB,EAAIX,GAClC,MAAO,CACLQ,KAAME,EACND,QAAS,CACPE,KACAX,SC1BN,IAYe6B,eAZS,SAACvB,GAAD,MAAY,CAClCN,KAAMM,EAAMD,KAAKL,KACjBC,MAAOK,EAAMD,KAAKJ,MAClBC,IAAKI,EAAMD,KAAKH,QAGS,SAAC4B,GAAD,OAAcC,6BAAmB,CAC1DL,oBACAC,kBACAC,mBACCE,KAEYD,EAhCf,YAAyF,IAArEH,EAAoE,EAApEA,kBAAmBC,EAAiD,EAAjDA,gBAAiBC,EAAgC,EAAhCA,gBAAiB3B,EAAe,EAAfA,MAAOD,EAAQ,EAARA,KAC9E,OACE,6BACE,4BAEIC,GACAA,EAAMa,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIgB,IAAKhB,GACP,2BAAOR,KAAK,WAAWyB,QAAS,kBAAMN,EAAgBZ,EAAKJ,OAC3D,uBAAGuB,UAAWnB,EAAKF,UAAY,UAAY,eAAgBE,EAAKH,UAChE,4BAAQsB,UAAU,UAAU1B,KAAK,SAASyB,QAAS,kBAAML,EAAgBZ,EAAOhB,KAAhF,QACA,4BAAQkC,UAAU,YAAY1B,KAAK,SAASyB,QAAS,kBAAMP,EAAkBX,EAAKJ,MAAlF,mBCoBCkB,G,MAAAA,aAZS,SAACvB,GAAD,MAAY,CAClCN,KAAMM,EAAMD,KAAKL,KACjBC,MAAOK,EAAMD,KAAKJ,MAClBC,IAAKI,EAAMD,KAAKH,QAGS,SAAC4B,GAAD,OAAcC,6BAAmB,CAC1DZ,eACAI,iBACAE,qBACCK,KAEYD,EA5BF,SAAC,GAAoE,IAAlEV,EAAiE,EAAjEA,aAAcI,EAAmD,EAAnDA,eAAgBE,EAAmC,EAAnCA,kBAAmBzB,EAAgB,EAAhBA,KAAME,EAAU,EAAVA,IACrE,OACE,yBAAKgC,UAAU,iBACb,wBAAIA,UAAU,cAAd,4BACA,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,aAAavB,GAAG,MAAMH,KAAK,OAAOc,MAAOtB,EAAMmC,SAAUhB,KAChE,IAARjB,EACA,4BAAQgC,UAAU,aAAa1B,KAAK,SAASyB,QAAS,kBAAMV,EAAevB,KAA3E,OACA,4BAAQkC,UAAU,gBAAgB1B,KAAK,SAASyB,QAAS,kBAAMR,EAAkBzB,KAAjF,WAGJ,kBAAC,EAAD,WCVAoC,G,MAAQC,sBACZlC,EACAmC,kCAeaC,MAbf,WACE,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,qDAEF,kBAAC,EAAD,SCTYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.90f24935.chunk.js","sourcesContent":["export const DELETE_TODO = 'DELETE_TODO';\nexport const CHECKBOX_TODO = 'CHECKBOX_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const INPUT_VALUE = 'INPUT_VALUE';\nexport const ADD_TODO = 'ADD_TODO';\nexport const UPDATE_TODO = 'UPDATE_TODO';","import * as actionTypes from './actionTypes';\n\nconst initialState = {\n  term: '',\n  items: [],\n  flg: false,\n}\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case actionTypes.INPUT_VALUE: {\n      return {\n        ...state,\n        term: payload,\n      }\n    }\n    case actionTypes.ADD_TODO: {\n      return {\n        ...state,\n        term: '',\n        items: [\n          ...state.items,\n          {\n            id: payload.id,\n            todoItem: state.term,\n            completed: false,\n          }\n        ],\n        flg: false,\n      }\n    }\n    case actionTypes.UPDATE_TODO: {\n      return {\n        ...state,\n        term: '',\n        items: state.items.map((item, index) =>\n          (state.selectedItemId === index) ?\n            {\n              ...item,\n              todoItem: payload.term\n            } :\n            item),\n        flg: false,\n      }\n    }\n    case actionTypes.DELETE_TODO: {\n      return {\n        ...state,\n        items: state.items.filter((item) => {\n          return item.id !== payload.id\n        }),\n      }\n    }\n    case actionTypes.CHECKBOX_TODO: {\n      return {\n        ...state,\n        items: state.items.map(item =>\n          (item.id === payload.id) ?\n            {\n              ...item,\n              completed: !item.completed\n            } :\n            item)\n      }\n    }\n    case actionTypes.EDIT_TODO: {\n      return {\n        ...state,\n        term: state.items[payload.id].todoItem,\n        flg: true,\n        selectedItemId: payload.id,\n      }\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport Todo from '../src/components/redux/reducer';\n\nconst rootReducer = combineReducers({\n  Todo,\n});\n\nexport default rootReducer;","import * as actionTypes from './actionTypes';\n\n\nexport function inputHandler(event) {\n  return {\n    type: actionTypes.INPUT_VALUE,\n    payload: event.target.value\n  }\n}\n\nexport function addTodoHandler(term) {\n  return {\n    type: actionTypes.ADD_TODO,\n    payload: {\n      id: +new Date(),\n      term,\n    }\n  }\n}\n\nexport function updateTodoHandler(term) {\n  return {\n    type: actionTypes.UPDATE_TODO,\n    payload: {\n      term,\n    }\n  }\n}\n\nexport function deleteTodoHandler(id) {\n  return {\n    type: actionTypes.DELETE_TODO,\n    payload: {\n      id,\n    }\n  }\n}\n\nexport function checkBoxHandler(id) {\n  return {\n    type: actionTypes.CHECKBOX_TODO,\n    payload: {\n      id,\n    }\n  }\n}\n\nexport function editTodoHandler(id, term) {\n  return {\n    type: actionTypes.EDIT_TODO,\n    payload: {\n      id,\n      term,\n    }\n  }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { deleteTodoHandler, checkBoxHandler, editTodoHandler } from '../../redux/actions';\n\nfunction TodoItem({ deleteTodoHandler, checkBoxHandler, editTodoHandler, items, term }) {\n  return (\n    <div>\n      <ul>\n        {\n          items &&\n          items.map((item, index) => (\n            <li key={index} >\n              <input type=\"checkbox\" onClick={() => checkBoxHandler(item.id)} />\n              <p className={item.completed ? 'checked' : 'not-checked'}>{item.todoItem}</p>\n              <button className=\"editBtn\" type=\"button\" onClick={() => editTodoHandler(index, term)}>Edit</button>\n              <button className=\"deleteBtn\" type=\"button\" onClick={() => deleteTodoHandler(item.id)}>Delete</button>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  term: state.Todo.term,\n  items: state.Todo.items,\n  flg: state.Todo.flg,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  deleteTodoHandler,\n  checkBoxHandler,\n  editTodoHandler,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoItem);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport TodoItem from './TodoItem/TodoItem';\n\nimport { inputHandler, addTodoHandler, updateTodoHandler } from '../redux/actions';\nimport './Todo.css';\n\nconst Todo = ({ inputHandler, addTodoHandler, updateTodoHandler, term, flg }) => {\n  return (\n    <div className=\"todoContainer\">\n      <h2 className=\"todoHeader\">What do you want to do ?</h2>\n      <div className=\"addTodoContainer\">\n        <input className=\"addTodoInp\" id=\"inp\" type=\"text\" value={term} onChange={inputHandler} />\n        {(flg === false) ?\n          <button className=\"addTodoBtn\" type=\"button\" onClick={() => addTodoHandler(term)}>Add</button> :\n          <button className=\"updateTodoBtn\" type=\"button\" onClick={() => updateTodoHandler(term)}>Update</button>\n        }\n      </div>\n      <TodoItem />\n    </div >\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  term: state.Todo.term,\n  items: state.Todo.items,\n  flg: state.Todo.flg,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  inputHandler,\n  addTodoHandler,\n  updateTodoHandler,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './rootReducer';\nimport Todo from './components/Todo/Todo';\n\nimport './App.css';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools());\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Todo app React-Redux</h1>\n        </header>\n        <Todo />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}